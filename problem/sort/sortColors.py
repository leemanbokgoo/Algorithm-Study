from typing import List
# 63 ) 색 정렬
# 빨간색을 0 , 흰색을 1, 파란색을 2라 할 때 순서대로 인접하는 제자리 정렬을 수행하라

# [ 풀이 1 ] 네덜란드 국기 문제를 응용한 풀이
# 붉은 색(위), 흰색(중앙), 파란색(아래)을 세 부분으로 대입해 분할하는 것으로서 피벗보다 작은 부분, 같은 부분, 큰 부분 이렇게 세부분으로 분할하여
# 기존의 퀵 정렬의 두 부분 분할에 비해 개선하는 방안을 제시한 풀이다.
# 투 포인터 풀이와 유사하며 그사이에 포인터가 하나 더 존재한다고 볼수 있다.
def sortColors(nums : List[int]) -> None:
    # 포인터 초기화
    # red : 0들이 모일 영역의 오른쪽 경계를 나타낸다. 이 포인터 왼쪽에는 0만 있어야 한다. 즉, 0이 아닌 원소의 시작점을 가리킨다.
    # white : 현재 검사 중인 원소의 위치를 나타낸다.
    # blue : 2들이 모일 영역의 왼쪽 경계를 나타낸다. 이 포인터 오른쪽에는 2만 있어야 한다.
    red, white, blue = 0, 0, len(nums)

    # white 포인터가 blue 포인터보다 작은 동안 반복
    # 즉, white 포인터가 배열의 정렬 되지않은 모든 부분을 검사할때까지 반복한다.
    while white < blue :
        # 1을 기준으로 작은 값은 왼쪽으로, 큰 값은 오른쪽으로 스왑.
        # 이때, red와 blue는 각각 오른쪽과 왼쪽으로 이동하면서 간격이 점점 좁아지는 형태가 된다.

        # 재 검사 중인 원소(nums[white])가 1보다 작은지 확인. 즉, 원소가 0인지 확인한다.
        if nums[white] < 1:
            # 현재 0인 원소를 red 포인터 위치의 원소와 교환함. 이렇게 하여 0을 배열의 맨 앞으로 보낸다.
            nums[red], nums[white] = nums[white], nums[red]
            white += 1 # 한칸 오른쪽으로 옮겨 다음 위치로
            # 위의 교환을 통해 이 교환을 통해, nums[red] 위치는 이제 0이 되었음이 확실해졌다.
            # red 포인터 왼쪽에는 0만 있어야함으로 red가 현재 위치에 있으면 안된다. red 포인터는 0이 아닌 원소의 시작점 가리켜야하기때문.
            # 고로 red를 한칸 오른쪽으로 이동 시켜 0의 영역을 확장하는 것이다.
            red += 1

        # 현재 검사 중인 원소(nums[white])가 1보다 큰지 확인. 즉, 원소가 2인지 확인한다.
        elif nums[white] > 1:
            # blue 포인터를 한 칸 왼쪽으로 이동시켜 2 영역의 경계를 축소한다.
            blue -= 1
            # 현재 2인 원소를 blue 포인터 위치의 원소와 교환한다. 이렇게 하여 2를 배열의 맨 뒤로 보낸다.
            # 참고로 white 포인터는 이동하지 않는다. 왜냐하면 nums[blue]에서 교환해 온 새 원소는 아직 검사되지 않았기 때문에, 다음 반복에서 그 원소를 다시 검사해야 하기 때문이다.
            nums[white], nums[blue] = nums[blue], nums[white]

        # 앞의 두 조건에 해당하지 않는 경우, 즉 원소가 1인 경우다.
        else :
            # 1은 이미 0의 영역(red의 왼쪽)과 2 영역(blue의 오른쪽) 사이에 있는 올바른 위치에 있음으로 교환이 필요없다.
            # white 포인터만 다음 원소로 이동시킨다.
            white += 1

if __name__ == "__main__":
    nums = [2,0,2,1,1,0]
    sortColors(nums) # The function modifies 'nums' in-place
    print(nums, "     : 기대 출력값 [0,0,1,1,2,2]") # Print the modified list

