from typing import List
# 59 ) 구간 병합
# 겹치는 구간을 병합하라.

# [ 풀이 1 ] 정렬하여 병합
def merge(intervals : List[List[int]]) -> List[List[int]]:
    merged = []

    # 이 문제를 풀기 위해서는 먼저 정렬을 수행한다. 정렬의 순서는 첫번째 값을 기준으로 한다.
    # sorted(intervals, key=lambda x: x[0]) : 람다를 이용하면 첫번째 값을 키로 이용하라는 지시를 할 수 있다. 두번째 값을 사용할 경우에는 x[1]
    # 그렇게 했을때 현재 아이템의 시작이 이전 아이템의 끝과 겹치게 되면 최대값을 기준으로 병합하는 형태로 계속 반복해 나간다.
    # 여기서 i는 [] 배열이다.
    for i in sorted(intervals, key=lambda x: x[0]):

        # merged[-1] : 리스트의 마지막 요소, 이전에 병합된 요소들 중 가장 최근에 추가된 (가장 마지막) 요소를 나타낸다.
        # i[0] <= merged[-1][1] : i의 시작점(i[0)이 merged 리스트의 마지막 간격의 끝점(merged[-1][1]보다 작거나 같다면
        if merged and i[0] <= merged[-1][1]:
            # merged 리스트의 마지막 간격의 끝점 (merged[-1][1])을 현재 간격 i의 끝점 (i[1])과 비교하여 더 큰 값으로 갱신한다.
            merged[-1][1] = max(merged[-1][1], i[1])

        # 다음 요소의 시작 값이 이전 요소의 끝과 더이상 겹치지않게 된다면,
        # 혹은 처음 반복해서 아직 merged에 아무 요소가 없다면
        else :
            # 병합을 멈추고  merged += i,을 이용해 새로운 아이템으로 추가한다.
            # , 연산자는 중첩 리스트로 만들어주는 역할을 하며 대괄호 []를 부여한것과 동일한 역할을 한다.
            merged += i,
    return merged


if __name__ == "__main__":
    input = [ [1,3], [2,6], [8,10], [15,18] ]
    # 출력값 [ [1,6], [8,10], [15,18] ]
    # 1에서 3, 2에서 6의 거리라고 생각하면 된다. 그러므로 [1,3]과 [2,6]이 겹치므로 [1,6]이 된다.
    print(str(merge(input)))



