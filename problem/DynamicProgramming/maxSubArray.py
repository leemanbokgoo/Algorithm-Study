import sys
from typing import List
import collections

#  86 ) 최대 서브 배열
# 합이 최대가 되는 연속 서브 배열을 찾아 합을 리턴하라.

# [ 풀이 1 ]
# 해당 문제는 연속된 서브 배열을 찾아야함으로 투 포인터는 사용할 수 없다. 투 포인터를 사용하려면 정렬된 배열이여야하기때문이다.
#앞에서부터 계속 값을 계산하면서 누적 합을 계산하는 방식으로 풀이해보자. 이전 값을 계속 더해나가되 0 이하가 되면 버린다.
# 어차피 최댓값을 찾는데 0 이하인 값을 굳이 서브 배열에 포함할 이유가 없기떄문이다.
# 메모이제이션으로 값을 더해 나가 최댓값을 추출하면 서브 배열의 최댓값을 찾을 수 있다.
def maxSubArray(nums : List[int]) -> int:
    for i in range(1, len(nums)):
        #  nums[i - 1] > 0 보다 크면 nums[i] 에 nums[i - 1]를 더해서 nums[i]에 값을 넣는다.
        # 아닐시 0을 반환한다.
        nums[i] += nums[i - 1] if nums[i - 1] > 0 else 0

    # 가장 큰 값을 반환한다.
    return max(nums)

# [ 풀이 2 ] 카데인 알고리즘.
# 제이 카데인이 O(n)에 풀이가 가능하도록 고안한 카데인 알고리즘이라는 좋은 해법이 있다.
# 당시 그는 최대 서브 배열을 찾기 위해 어디서 시작되는 지를 찾는 문제(n^2) 풀이에서 각 단께마다 최댓값을 담아 어디서 끝나는 지를 찾는 문제 O(n) 풀이로 치환해서 풀이했다.
# [ 풀이 1 ]에서는 매번 계산해서 넣기만하고 마지막에 max()를 전체 계산해서 가져오게 했지만 제이 카데인은 밑의 형태로 매번 best_sum을 계산하게 했다.
# 하지만 사실상 [ 풀이 1 ]과 동일한 코드로 볼 수 있으며 속도 또한 양쪽 모두 동일하다.
def maxSubArray2(nums : List[int]) -> int:

    # sys.maxsize로 초기화하는 이유는 배열의 모든 요소가 음수일 때, 배열 내의 가장 큰 음수(0에 가장 가까운 음수)를 올바르게 결과로 반환하기 위함
    best_sum = -sys.maxsize
    # 현재 순회 중인 지점까지의 연속 부분 배열의 합을 저장함. 이 값이 음수가 되면 현재까지의 연속 합을 버리고 새로운 연속 배열을 찾는다.
    current_sum = 0

    for num in nums:
        # 이전 current_sum이 음수이거나, 현재 요소 num보다 작아서 현재 요소를 포함하는 연속 합을 방해할 때, 이전 합을 버리고 num부터 새로운 연속 배열의 합을 구하는 코드
        # 이전 current_sum이 양수이거나, 현재 요소를 더해도 여전히 확장하는 것이 num 혼자 시작하는 것보다 클 때, 기존의 연속 배열의 합에다 num을 더한다.
        current_sum = max(num, current_sum + num)
        # 매 반복마다, 지금까지 발견된 최대 합인 best_sum과 현재 위치까지의 최대 연속 합인 current_sum을 비교하여 더 큰 값으로 best_sum을 갱신한다.
        # current_sum이 중간에 음수가 되어 리셋되더라도 (즉, 새로운 연속 배열의 합을 구하더라도), 이전에 기록된 최대 합은 best_sum에 안전하게 남아 있게된다.
        best_sum = max( best_sum, current_sum)

    return best_sum

if __name__ == "__main__":

    nums = [-2, 1, -3,4, -1, 2, 1, -5, 4]
    nums2 = [-2, 1, -3,4, -1, 2, 1, -5, 4]
    # [4,-1,2,1]은 합 6으로 가장 큰 서브 배열이다.
    print( "[ 풀이 1 ] 메모이제이션 "  , maxSubArray(nums), " | 기대 출력값 6")
    print( "[ 풀이 2 ] 카데인 알고리즘 "  , maxSubArray2(nums2), " | 기대 출력값 6")

