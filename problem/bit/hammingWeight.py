# 74 ) 1비트의 개수
# 부호 없는 정수형을 입력받아 1비트의 개수를 출력하라.

# [ 풀이 1 ] 1의 개수 계산
# 이 문제의 결과는 모두 0으로 구성된 비트들과의 해밍거리로, 이를 해밍 가중치라고 부른다.
# 따라서 이 문제의 정답은 해밍 가중치의 값이라고 할 수 있다.
# 해밍 거리는 A XOR B였고 그렇다면 해밍 가중치는 B를 0으로 두면 된다.
def hammingWeight( n : int ) -> int:
    return bin(n).count('1')

# [ 풀이 2 ] 비트 연산
# 파이썬의 문자열 기능을 사용하지않고 비트 연산만으로 1 비트의 개수를 구하는 풀이다.
# 이진수의 특징을 살펴보면 1000에서 1을 뺴면 0111이 된다. 이 두값을 AND 연산하면 0이 된다.
# 또 다른 예로 1010에서 1을 뺴면 1001이다. 두 값을 연산하면 1000이 남게 된다.
# 1011도 1을 빼면 1010이다. AND연산하면 101이다.
# 이처럼 1을 뺀값과 AND연산을 할때마다 비트가 1씩 빠지게 된다. 그렇다면 0이 될떄까지 이 작업을 반복함녀 전체 비트에서 1의 개수가 몇개인지 알 수있다.
def hammingWeight2( n : int ) -> int:
    count = 0

    # n 값이 존재하는 동안.
    while n:
        # n &= n -1 은 n = n & n-1 이다.
        # n에서 1을 뺀 값과 n을 AND 연산한다.
        n &= n -1
        # 한번 반복 될때마다 count를 올린다.
        count += 1

    return count


if __name__ == "__main__":

    n = 0b00000000000000000000000000001011
    n2 = 0b00000000000000000000000010000000
    n3 = 0b11111111111111111111111111111101

    print("=============[ 풀이 1 ]================")
    print(hammingWeight(n), " | 기대 출력값 : 3")
    print(hammingWeight(n2), " | 기대 출력값 : 1")
    print(hammingWeight(n3), " | 기대 출력값 : 31")

    print("=============[ 풀이 2 ]================")
    print(hammingWeight2(n), " | 기대 출력값 : 3")
    print(hammingWeight2(n2), " | 기대 출력값 : 1")
    print(hammingWeight2(n3), " | 기대 출력값 : 31")