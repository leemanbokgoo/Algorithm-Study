import heapq
from typing import List
# 79 ) 키에 따른 대기열 재구성
# 여러 명의 사람들이 줄을 서 있다. 각각의 사람은 (h,k)의 두 정수 쌍을 갖는다. h는 그 사람의 키, k는 앞에 줄을 서 있는 사람들 중 자신의 키 이상인 사람들의 수를 뜻한다.
# 이 값이 올바르도록 줄을 재 정렬 하는 알고리즘을 작성하라.

# [ 풀이 1 ] 우선 순위 큐 이용
# 우선 순위 큐 자체가 매번 그때 그때의 최소 또는 최댓값을 추출하기 때문에 그리디에 어울리는 대표적인 자료구조라고 할 수 있다.
# 실제로 그리디 문제의 대부분은 우선 순위 큐를 활용해 풀이한다.
# 첫번쨰 값이 큰 순서대로 추출되는 최대 힙 형태로 풀이할 수 있고, 두번째 값은 삽입되는 인덱스로 활용할 수 있다.
# 파이썬은 최소 힙만 지원하기대문에 첫번쨰 값을 음수로 변경해 최소 힙에서도 최대 힙처럼 구현한다.
# 두번쨰 값을 인덱스로 해 삽입되는 위치로 구현할 수 있다.
def reconstructQueue( people : List[List[int]]) -> List[List[int]]:
    heap = [] # 힙 선언

    # 들고 온 사람들(키, 자신의 키 이상인 사람들의 수 ) 를 힙에 저장한다.
    # 음수(-)를 붙이는 이유는 파이썬은 최소 힙만 지원하기때문에 키에 해당되는 값을 음수로 변경해 최소 힙에서도 최대 힙처럼 구현한다.
    for person in people:
        heapq.heappush(heap, (-person[0], person[1]))

    # 결과를 저장할 변수
    result = []

    # heap에 값이 존재하는 동안.
    while heap:
        # heappop : heap에서 가장 작은 요소를 꺼낸다. 인덱스로 치자면 0이다.
        person = heapq.heappop(heap)

        # -person[0] : person[0]앞에 -를 붙임으로 원래의 수로 되돌린다.
        # person[1]은 k 값으로 삽입할 인덱스로 사용될 수 있다. k는 현재 result 리스트에 있는 키가 같거나 큰 사람들의 수와 같기 때문에 k 위치에 삽입하면 k의 조건을 정확히 만족하게 된다.
        # 키가 큰 사람들을 먼저 배치함으로 현재 result 리스트에는 오직 지금 배치하려는 사람보다 키가 크거나 같은 사람들만 들어 있게 된다.
        # 그럼으로 현재 삽입하려는 요소의 k 조건을 만족 할 수 있는 사람들만 현재 배열에 들어있는 것이다. 그렇기때문에 현재 배열에서 k 조건을 만족하는 위치에 넣어주면 된다.
        # 그렇게 새로운 요소가 추가 되더라도 이미 배열에는 현재 요소보다 키가 큰 사람들만 들어있음으로 현재 요소는 키가 큰 사람들의 k 조건에 영향을 줄 수 없음으로 삽입해도 문제가 없다.
        # 즉, 키가 큰 사람들 앞에 서 있는 전체 사람의 수는 늘어났을지라도, 앞에 서 있는 사람 중 k 조건을 만족하는 사람의 수(해당 요소보다 키가 큰 사람)는 변하지 않는다.
        # insert : 원하는 인덱스에 삽입할 수 있다 insert(인덱스 , 삽입할 값)
        result.insert(person[1], [-person[0], person[1]])

    return result

if __name__ == "__main__":
    nums = [ [7,0], [4,4], [7,1], [5,0], [6,1], [5,2] ]

    # 키가 5인 사람이 가장 먼저 섰고 앞에는 아무도 없다.
    # 7인 사람이 뒤따르고 그보다 키가 더 큰 사람은 아무도 없다. 5인 사람이 섰으며 앞에 5,7 두명이 자신보다 크거나 같다.
    # 6인 사람의 앞에는 자신보다 큰 키 7인 사람 한명이 있다. 4인 사람 앞에는 5,7,5,6 네 명이 있다.
    # 마지막으로 7인 사람 앞에 자신보다 크거나 같은 이는 키가 7인 사람 한명이다.
    print("[ 풀이 1 ] 그리디 알고리즘 : ", reconstructQueue(nums))
    print("기대 출력값              : [ [5,0], [7,0], [5,2], [6,1], [4,4], [7,1] ]")
